// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// References: Next-auth official docs on Role-based auth, Adapters, Prisma docs(https://authjs.dev/guides/basics/role-based-access-control)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
      id                 String  @id @default(cuid())
      userId             String
      type               String
      provider           String
      providerAccountId  String
      refresh_token      String? @db.Text
      access_token       String? @db.Text
      expires_at         Int?
      token_type         String?
      scope              String?
      id_token           String? @db.Text
      session_state      String?
      oauth_token_secret String?
      oauth_token        String?
    
      user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
      @@unique([provider, providerAccountId])
    }
    
    model Session {
      id           String   @id @default(cuid())
      sessionToken String   @unique
      userId       String
      expires      DateTime
      user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    }
    
    model User {
      id            String            @id @default(cuid())
      name          String?
      email         String?           @unique
      emailVerified DateTime?
      image         String?
      accounts      Account[]
      sessions      Session[]
      job           String?
      salary        String?
      role          Role              @default(EMPLOYEE)
      attendances   AttendanceRecord[]
      leaves        LeaveRequest[]
      createdAt     DateTime?         @default(now()) @db.Date
      updatedAt     DateTime?         @updatedAt      @db.Date
    }
    
    model VerificationToken {
      identifier String
      token      String   @unique
      expires    DateTime
    
      @@unique([identifier, token])
    }
    enum Role {
      EMPLOYEE
      ADMIN
    }
    enum AttendanceStatus {
      PRESENT
      ABSENT
    }
    enum LeaveStatus {
      PENDING
      APPROVED
      REJECTED
    }
    model AttendanceRecord {
      id        Int              @id @default(autoincrement())
      userId    String
      user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
      status    AttendanceStatus @default(ABSENT)
      createdAt DateTime?        @default(now()) @db.Date
      updatedAt DateTime?        @updatedAt      @db.Date
    }
    model LeaveRequest {
      id        Int           @id @default(autoincrement())
      userId    String
      user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
      status    LeaveStatus   @default(PENDING)
      reason    String
      startDate DateTime      @db.Date
      endDate   DateTime      @db.Date
      createdAt DateTime?     @default(now()) @db.Date
      updatedAt DateTime?     @updatedAt      @db.Date
    }